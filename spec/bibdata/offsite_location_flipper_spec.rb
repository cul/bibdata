require 'rails_helper'

RSpec.describe Bibdata::OffsiteLocationFlipper do
  describe ".location_code_to_recap_flipped_location_code" do

    context "locations that start with 'off,'" do
      {
        'off,abc' => 'off,abc',
        'off,def' => 'off,def',
        'off,ghi' => 'off,ghi',
      }.each do |original_location_code, expected_flipped_location_code|
        barcode = 'XYZplaceholder'
        material_type = 'Book'
        it "returns the code without modification" do
          expect(
            described_class.location_code_to_recap_flipped_location_code(original_location_code, barcode, material_type)
          ).to eq(
            expected_flipped_location_code
          )
        end
      end
    end

    context "locations that end with '4off'" do
      {
        'abc4off' => 'off,abc',
        'def4off' => 'off,def',
        'ghi4off' => 'off,ghi',
      }.each do |original_location_code, expected_flipped_location_code|
        barcode = 'XYZplaceholder'
        material_type = 'Book'
        it "flips #{original_location_code} to #{expected_flipped_location_code}" do
          expect(
            described_class.location_code_to_recap_flipped_location_code(original_location_code, barcode, material_type)
          ).to eq(
            expected_flipped_location_code
          )
        end
      end
    end

    context "codes for non-Microformat items without a barcode match" do
      {
        'adm' => nil,
        'afst' => nil,
        'asx' => nil,
        'ava' => nil,
        'avap' => nil,
        'avda' => nil,
        'ave,mura' => nil,
        'ave,ref' => nil,
        'ave,res' => nil,
        'ave,starr' => nil,
        'ave' => nil,
        'ave4off' => 'off,ave',
        'avelc' => 'off,ave',
        'avelcn' => 'off,ave',
        'avr,cage' => nil,
        'avr,rrm' => nil,
        'avr,stor' => nil,
        'avr' => 'off,avr',
        'avr4off' => 'off,avr',
        'bar,abc' => nil,
        'bar,abn' => nil,
        'bar,alum' => nil,
        'bar,bda' => nil,
        'bar,cep' => nil,
        'bar,circ' => nil,
        'bar,csc' => nil,
        'bar,des' => nil,
        'bar,dhc' => nil,
        'bar,erc' => nil,
        'bar,fac' => nil,
        'bar,fli' => nil,
        'bar,four' => nil,
        'bar,imats' => nil,
        'bar,medi' => nil,
        'bar,mov' => nil,
        'bar,new' => nil,
        'bar,one' => nil,
        'bar,over' => nil,
        'bar,per' => nil,
        'bar,qua' => nil,
        'bar,rare' => nil,
        'bar,ref' => nil,
        'bar,resc' => nil,
        'bar,resco' => nil,
        'bar,smc' => nil,
        'bar,spec' => nil,
        'bar,stor' => nil,
        'bar,three' => nil,
        'bar,two' => nil,
        'bar,znk' => nil,
        'bar,znz' => nil,
        'bar' => nil,
        'bmc' => 'off,bmc',
        'bmc4off' => 'off,bmc',
        'bmcr' => 'off,bmcr',
        'bmcr4off' => 'off,bmcr',
        'bsc' => nil,
        'bsr' => nil,
        'bus,ref' => nil,
        'bus,res' => nil,
        'bus' => 'off,bus',
        'bus4off' => 'off,bus',
        'busn' => 'off,bus',
        'bwc' => nil,
        'CATITA' => nil,
        'CIRCave' => nil,
        'CIRCbdirec' => nil,
        'CIRCbus' => nil,
        'CIRCeax' => nil,
        'CIRCglx' => nil,
        'CIRCmus' => nil,
        'CIRCrbx' => nil,
        'CIRCrecap' => nil,
        'CIRCref' => nil,
        'CIRCUnkn' => nil,
        'CIRCuts' => nil,
        'clm' => nil,
        'comp' => nil,
        'dc,bus' => nil,
        'dc,dhc' => nil,
        'dc,dml' => nil,
        'dc,dsc' => nil,
        'dc,dssc' => nil,
        'dc,swx' => nil,
        'dc,web' => nil,
        'dic' => nil,
        'dic4off' => 'off,dic',
        'docs,map' => nil,
        'docs' => 'off,docs',
        'docs4off' => 'off,docs',
        'dsc' => nil,
        'eaa' => 'off,eaa',
        'eaa4off' => 'off,eaa',
        'eal,cage' => nil,
        'eal,fol' => nil,
        'eal,rare' => nil,
        'eal,ref' => nil,
        'eal,res' => nil,
        'eal,sky' => nil,
        'eal,spec' => nil,
        'eal' => 'off,eal',
        'eal4off' => 'off,eal',
        'ean' => 'off,ean',
        'ear' => 'off,ear',
        'eax,cage' => nil,
        'eax,fol' => nil,
        'eax,rare' => nil,
        'eax,ref' => nil,
        'eax,ref2' => nil,
        'eax,res' => nil,
        'eax,sky' => 'off,eax',
        'eax,spec' => nil,
        'eax,tib' => 'off,eax',
        'eax' => 'off,eax',
        'eax4off' => 'off,eax',
        'egyp' => nil,
        'etas' => nil,
        'ets' => nil,
        'euro' => nil,
        'far,cage' => nil,
        'far,rrm' => nil,
        'far,stor' => nil,
        'far' => 'off,far',
        'far4off' => 'off,far',
        'fax' => nil,
        'fax4off' => 'off,fax',
        'faxlc' => 'off,fax',
        'faxlcn' => 'off,fax',
        'gax' => nil,
        'gex' => nil,
        'glg,fol' => nil,
        'glg,ref' => nil,
        'glg' => nil,
        'glg4off' => 'off,glg',
        'glx,anx' => 'off,glx',
        'glx,fol' => nil,
        'glx,inactive' => nil,
        'glx,ltd' => nil,
        'glx,new' => nil,
        'glx,pre' => nil,
        'glx,rare' => 'off,glx',
        'glx,starr' => nil,
        'glx' => nil,
        'glx4off' => 'off,glx',
        'glxn' => nil,
        'gnc,fol' => nil,
        'gnc' => 'off,gnc',
        'gnc4off' => 'off,gnc',
        'grid' => nil,
        'grrr' => nil,
        'hsl,adm' => nil,
        'hsl,mcol' => nil,
        'hsl,mono' => nil,
        'hsl,per' => nil,
        'hsl,rbka' => nil,
        'hsl,rbkr' => nil,
        'hsl,ref' => nil,
        'hsl,res' => nil,
        'hsl,scau' => nil,
        'hsl,scfr' => nil,
        'hsl,schy' => nil,
        'hsl,scms' => nil,
        'hsl,scrf' => nil,
        'hsl,scst' => nil,
        'hsl,str' => nil,
        'hsl,web' => nil,
        'hsl,xnyspi' => nil,
        'hsl,xorth' => nil,
        'hsl' => nil,
        'hsl4off' => 'off,hsl',
        'ill' => nil,
        'islm' => nil,
        'ital' => nil,
        'jou,over' => nil,
        'jou,ref' => nil,
        'jou,res' => nil,
        'jou' => 'off,jou',
        'jou4off' => 'off,jou',
        'lan' => nil,
        'lata' => nil,
        'lawbbcmi' => nil,
        'lawbbcmi02' => nil,
        'lawbla01' => nil,
        'lawblj01' => nil,
        'lawblx' => nil,
        'lawcorecan' => nil,
        'lawfbfee' => nil,
        'lawfclin' => nil,
        'lawfdir' => nil,
        'lawfjgh' => nil,
        'lawflibo' => nil,
        'lawgnb3' => nil,
        'lawgnb8' => nil,
        'lawgnb8f' => nil,
        'lawgnc' => nil,
        'lawgnoca' => nil,
        'lawgnocb' => nil,
        'lawgnocx' => nil,
        'lawgnofr' => nil,
        'lawgns1' => nil,
        'lawgns2' => nil,
        'lawrbrr' => nil,
        'lawrs7fa' => nil,
        'lawrsccr' => nil,
        'lawrscd' => nil,
        'lawrsear' => nil,
        'lawrsmfc' => nil,
        'lawrsmfm' => nil,
        'lawspofr' => nil,
        'lawspsnc' => nil,
        'lawsptre' => nil,
        'lawts531' => nil,
        'lawtscat' => nil,
        'lawtscm' => nil,
        'lawtsfarm' => nil,
        'leh,agcy' => nil,
        'leh,atls' => nil,
        'leh,bdis' => 'off,bus',
        'leh,dsc' => nil,
        'leh,eds' => nil,
        'leh,hraf' => nil,
        'leh,pl' => 'off,glx',
        'leh,ratl' => nil,
        'leh,rdsk' => nil,
        'leh,ref' => 'off,leh',
        'leh,res' => nil,
        'leh,rind' => nil,
        'leh,slav' => 'off,leh',
        'leh,tib' => 'off,eax',
        'leh' => 'off,leh',
        'leh4off' => 'off,leh',
        'lehn' => nil,
        'lsp' => nil,
        'lsw,rdsk' => nil,
        'lsw,ref' => 'off,leh',
        'lsw,res' => nil,
        'lsw,rind' => nil,
        'lweb,arc' => nil,
        'lweb,docs' => nil,
        'lweb,ref' => nil,
        'lweb' => nil,
        'manc,dic' => nil,
        'manc' => 'off,glx',
        'map' => nil,
        'mat,medi' => nil,
        'mat,over' => nil,
        'mat,ref' => nil,
        'mat,res' => nil,
        'mat,ser' => nil,
        'mat' => nil,
        'mat4off' => 'off,mat',
        'MIGRATION' => nil,
        'mil,fli' => nil,
        'mil,over' => nil,
        'mil,res' => nil,
        'mil,stdy' => nil,
        'mil' => nil,
        'morl' => nil,
        'mrr' => 'off,mrr',
        'mrr4off' => 'off,mrr',
        'msa' => 'off,msr',
        'msc,case' => nil,
        'msc,fol' => 'off,msc',
        'msc,rare' => nil,
        'msc,ref' => 'off,msc',
        'msc,resc' => nil,
        'msc,resp' => nil,
        'msc' => nil,
        'msc4off' => 'off,msc',
        'msci,ref' => nil,
        'msr,case' => nil,
        'msr,resc' => nil,
        'msr,resh' => nil,
        'msr' => nil,
        'msr4off' => 'off,msr',
        'mus,case' => nil,
        'mus,fol' => nil,
        'mus,lib' => nil,
        'mus,ref' => 'off,mus',
        'mus,resc' => nil,
        'mus,reso' => nil,
        'mus,resp' => nil,
        'mus' => nil,
        'mus4off' => 'off,mus',
        'mvl,res' => nil,
        'mvr,case' => nil,
        'mvr,resc' => nil,
        'mvr,resh' => nil,
        'mvr' => 'off,mvr',
        'mvr4off' => 'off,mvr',
        'off,avda' => 'off,avda',
        'off,ave' => 'off,ave',
        'off,avr' => 'off,avr',
        'off,bio' => 'off,bio',
        'off,bmc' => 'off,bmc',
        'off,bmcr' => 'off,bmcr',
        'off,bssc' => 'off,bssc',
        'off,bus' => 'off,bus',
        'off,che' => 'off,che',
        'off,dic' => 'off,dic',
        'off,docs' => 'off,docs',
        'off,eaa' => 'off,eaa',
        'off,eal' => 'off,eal',
        'off,ean' => 'off,ean',
        'off,ear' => 'off,ear',
        'off,eax' => 'off,eax',
        'off,eng' => 'off,eng',
        'off,far' => 'off,far',
        'off,fax' => 'off,fax',
        'off,glg' => 'off,glg',
        'off,glx' => 'off,glx',
        'off,gnc' => 'off,gnc',
        'off,gsc' => 'off,gsc',
        'off,hsar' => 'off,hsar',
        'off,hsl' => 'off,hsl',
        'off,hsr' => 'off,hsr',
        'off,hssc' => 'off,hssc',
        'off,jou' => 'off,jou',
        'off,leh' => 'off,leh',
        'off,les' => 'off,les',
        'off,mat' => 'off,mat',
        'off,mrr' => 'off,mrr',
        'off,msc' => 'off,msc',
        'off,msr' => 'off,msr',
        'off,mus' => 'off,mus',
        'off,mvr' => 'off,mvr',
        'off,oral' => 'off,oral',
        'off,phy' => 'off,phy',
        'off,prd' => 'off,prd',
        'off,psy' => 'off,psy',
        'off,rbms' => 'off,rbms',
        'off,rbx' => 'off,rbx',
        'off,ref' => 'off,ref',
        'off,sci' => 'off,sci',
        'off,swx' => 'off,swx',
        'off,uacl' => 'off,uacl',
        'off,uncat' => 'off,uncat',
        'off,unr' => 'off,unr',
        'off,uta' => 'off,uta',
        'off,utmrl' => 'off,utmrl',
        'off,utn' => 'off,utn',
        'off,utp' => 'off,utp',
        'off,uts' => 'off,uts',
        'off,vmc' => 'off,vmc',
        'off,war' => 'off,war',
        'oral,dgtl' => nil,
        'oral' => 'off,oral',
        'pap' => nil,
        'pat' => nil,
        'prd' => nil,
        'prr' => nil,
        'rbi' => nil,
        'rbms' => 'off,rbms',
        'rbx' => 'off,rbx',
        'rbx4off' => 'off,rbx',
        'ref,atl' => nil,
        'ref,dic' => nil,
        'ref,dsk' => nil,
        'ref,over' => nil,
        'ref' => 'off,ref',
        'ref4off' => 'off,ref',
        'RESVave' => nil,
        'RESVeax' => nil,
        'RESVglx' => nil,
        'RESVmus' => nil,
        'RESVuts' => nil,
        'said' => nil,
        'sasi' => nil,
        'sci,clsd' => nil,
        'sci,medi' => nil,
        'sci,ref' => 'off,sci',
        'sci,res' => nil,
        'sci,tech' => nil,
        'sci' => 'off,sci',
        'sci4off' => 'off,sci',
        'SELFglx' => nil,
        'sho' => nil,
        'site' => nil,
        'sls,cage' => nil,
        'sls4off' => 'off,sls',
        'swx,anx2' => 'off,swx',
        'swx,dis' => nil,
        'swx,rdsk' => nil,
        'swx,ref' => nil,
        'swx,res' => nil,
        'swx,rind' => nil,
        'swx,stor' => nil,
        'swx,suny' => nil,
        'swx' => 'off,swx',
        'swx4off' => 'off,swx',
        'tcx' => nil,
        'uacl,low' => 'off,uacl',
        'uacl' => 'off,uacl',
        'unkn' => nil,
        'unmapped' => nil,
        'ushi' => nil,
        'uts,arc' => 'off,uta',
        'uts,aud' => nil,
        'uts,con' => nil,
        'uts,essxx1' => nil,
        'uts,essxx2' => nil,
        'uts,essxx3' => nil,
        'uts,fic' => 'off,mrr',
        'uts,fil' => 'off,mrr',
        'uts,gil' => nil,
        'uts,locxxf' => nil,
        'uts,mac' => nil,
        'uts,macxfp' => nil,
        'uts,macxxf' => nil,
        'uts,macxxp' => nil,
        'uts,map' => nil,
        'uts,mrld' => 'off,utmrl',
        'uts,mrldr' => nil,
        'uts,mrldxf' => 'off,utmrl',
        'uts,mrlo' => 'off,utmrl',
        'uts,mrlor' => nil,
        'uts,mrloxf' => 'off,utmrl',
        'uts,mrls' => nil,
        'uts,mrlxxp' => nil,
        'uts,mss' => nil,
        'uts,per' => nil,
        'uts,perr' => nil,
        'uts,perrxf' => nil,
        'uts,perxxf' => nil,
        'uts,prs' => nil,
        'uts,ref' => nil,
        'uts,refr' => nil,
        'uts,refx3a' => nil,
        'uts,refxs1' => nil,
        'uts,refxs2' => nil,
        'uts,refxxa' => nil,
        'uts,reled' => nil,
        'uts,res' => nil,
        'uts,tms' => nil,
        'uts,twr' => nil,
        'uts,twrxxf' => nil,
        'uts,unn' => 'off,uts',
        'uts,unnr' => 'off,unr',
        'uts,unnrxf' => nil,
        'uts,unnrxp' => nil,
        'uts,unnxxf' => nil,
        'uts,unnxxp' => 'off,utp',
        'uts,vid' => nil,
        'uts' => 'off,uts',
        'uts4off' => 'off,uts',
        'vmc' => 'off,vmc',
        'war' => nil,
        'war4off' => 'off,war',
      }.each do |original_location_code, expected_flipped_location_code|
        barcode = '_non_matching_barcode_'
        material_type = 'Book'
        it "flips #{original_location_code} to #{expected_flipped_location_code}" do
          expect(
            described_class.location_code_to_recap_flipped_location_code(original_location_code, barcode, material_type)
          ).to eq(
            expected_flipped_location_code
          )
        end
      end
    end

    context 'Mappings based on material type' do
      it 'maps as expected' do
        expect(described_class.location_code_to_recap_flipped_location_code('anycode', 'CR12345', described_class::MATERIAL_TYPE_MICROFORMAT)).to eq('off,mrr')
        expect(described_class.location_code_to_recap_flipped_location_code('mus', 'CU12345', described_class::MATERIAL_TYPE_MICROFORMAT)).to eq('off,mrr')
        expect(described_class.location_code_to_recap_flipped_location_code('uts,unn', '_non_matching_barcode_', described_class::MATERIAL_TYPE_MICROFORMAT)).to eq('off,mrr')
        expect(described_class.location_code_to_recap_flipped_location_code('fax', 'CU12345', described_class::MATERIAL_TYPE_MICROFORMAT)).to eq('off,mrr')
        expect(described_class.location_code_to_recap_flipped_location_code('ave', 'CU12345', described_class::MATERIAL_TYPE_MICROFORMAT)).to eq('off,mrr')
        expect(described_class.location_code_to_recap_flipped_location_code('mus', 'CU12345', 'NOT-MICROFORMAT')).to eq('off,mus')
        expect(described_class.location_code_to_recap_flipped_location_code('uts,unn', '_non_matching_barcode_', 'NOT-MICROFORMAT')).to eq('off,uts')
      end
    end
  end
end

